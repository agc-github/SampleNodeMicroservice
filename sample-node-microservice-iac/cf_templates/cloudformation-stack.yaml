AWSTemplateFormatVersion: 2010-09-09
Description: >-
  core network infrastructure and IAM resources for SampleNodeMicroservice hosted in Amazon ECS using AWS Fargate
Mappings:
  SubnetConfig:
    VPC:
      CIDR: 10.0.0.0/16
    PublicOne:
      CIDR: 10.0.0.0/24
    PublicTwo:
      CIDR: 10.0.1.0/24
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap 
        - SubnetConfig
        - VPC
        - CIDR
  SecurityGroupForALB:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: Allow http request on Port 80 from internet
        VpcId: !Ref VPC
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0    
        SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
  SecurityGroupForContainer:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: Allow http request on Port 3000
        VpcId: !Ref VPC
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0        
  PublicSubnetOne:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone:
        'Fn::Select':
          - 0
          - 'Fn::GetAZs':
              Ref: 'AWS::Region'
      VpcId: !Ref VPC
      CidrBlock: !FindInMap 
        - SubnetConfig
        - PublicOne
        - CIDR
      MapPublicIpOnLaunch: true
    DependsOn:
      - VPC
  PublicSubnetTwo:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone:
        'Fn::Select':
          - 1
          - 'Fn::GetAZs':
              Ref: 'AWS::Region'
      VpcId: !Ref VPC
      CidrBlock: !FindInMap 
        - SubnetConfig
        - PublicTwo
        - CIDR
      MapPublicIpOnLaunch: true
    DependsOn:
      - VPC
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    DependsOn:
      - VPC
  GatewayAttachement:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
    DependsOn:
      - VPC
  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn:
      - GatewayAttachement
      - PublicRouteTable
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnetOneRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnetOne
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetTwoRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnetTwo
      RouteTableId: !Ref PublicRouteTable
  ECRRepository: 
    Type: AWS::ECR::Repository
    Properties: 
      RepositoryName: "sample-node-microservice/service"
  ECSCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: "sample-node-microservice-ecs-cluster"
  LogGroup: 
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "sample-node-microservice-log-group"
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      Scheme: "internet-facing"
      SecurityGroups: 
        - !Ref SecurityGroupForALB
      Subnets: 
        - !Ref PublicSubnetOne
        - !Ref PublicSubnetTwo
      Type: "application"
    DependsOn:
      - GatewayAttachement
  TargetGroup1:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: "/"
      HealthCheckProtocol: "HTTP"
      HealthyThresholdCount: 3
      Name: "sample-node-microservice-TG-1"
      Port: 3000
      Protocol: "HTTP"
      TargetType: "ip"
      UnhealthyThresholdCount: 3
      VpcId: !Ref VPC
  TargetGroup2:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: "/"
      HealthCheckProtocol: "HTTP"
      HealthyThresholdCount: 3
      Name: "sample-node-microservice-TG-2"
      Port: 3000
      Protocol: "HTTP"
      TargetType: "ip"
      UnhealthyThresholdCount: 3
      VpcId: !Ref VPC
  ListenerForPort80:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup1
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: "HTTP"
  ListenerForPort8080:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup1
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 8080
      Protocol: "HTTP"
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: sample-node-microservice-task-definition
      Cpu: '256'
      Memory: '512'
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
      ExecutionRoleArn: !Ref ECSServiceRole
      TaskRoleArn: !Ref ECSTaskRole
      ContainerDefinitions:
      - Name: sample-node-microservice-ecs-service-container
        Image: "488314167089.dkr.ecr.ap-south-1.amazonaws.com/sample-node-microservice/service:latest"
        PortMappings:
        - ContainerPort: 3000
          Protocol: http
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: sample-node-microservice-log-group
            awslogs-region: ap-south-1
            awslogs-stream-prefix: sample-node-microservice-log-stream
        Essential: true
  ECSService:
    Type: AWS::ECS::Service
    DependsOn:
      - ListenerForPort80
    Properties:
      ServiceName: "sample-node-microservice-ecs-service-container"
      Cluster: !Ref ECSCluster
      LaunchType: "FARGATE"
      DeploymentController:
        Type: "CODE_DEPLOY"
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 0
      DesiredCount: 0
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
          - !Ref SecurityGroupForContainer
          Subnets:
          - !Ref PublicSubnetOne
          - !Ref PublicSubnetTwo
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
      - ContainerName: "sample-node-microservice-ecs-service-container"
        ContainerPort: 3000
        TargetGroupArn: !Ref TargetGroup1
  CodeDeployECSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [codedeploy.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Description: service role that grants CodeDeploy access to Amazon ECS
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodeDeployRoleForECS
  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [codepipeline.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: CodePipelineServiceRolePolicy
          PolicyDocument:
            Statement:
              - Action:
                  - iam:PassRole
                Resource: "*"
                Effect: Allow
                Condition:
                  StringEqualsIfExists:
                    iam:PassedToService:
                      - cloudformation.amazonaws.com
                      - elasticbeanstalk.amazonaws.com
                      - ec2.amazonaws.com
                      - ecs-tasks.amazonaws.com
              - Action:
                  - codecommit:CancelUploadArchive
                  - codecommit:GetBranch
                  - codecommit:GetCommit
                  - codecommit:GetUploadArchiveStatus
                  - codecommit:UploadArchive
                Resource: "*"
                Effect: Allow
              - Action:
                  - codedeploy:CreateDeployment
                  - codedeploy:GetApplication
                  - codedeploy:GetApplicationRevision
                  - codedeploy:GetDeployment
                  - codedeploy:GetDeploymentConfig
                  - codedeploy:RegisterApplicationRevision
                Resource: "*"
                Effect: Allow
              - Action:
                  - codestar-connections:UseConnection
                Resource: "*"
                Effect: Allow
              - Action:
                  - elasticbeanstalk:*
                  - ec2:*
                  - elasticloadbalancing:*
                  - autoscaling:*
                  - cloudwatch:*
                  - s3:*
                  - sns:*
                  - cloudformation:*
                  - rds:*
                  - sqs:*
                  - ecs:*
                Resource: "*"
                Effect: Allow
              - Action:
                  - lambda:InvokeFunction
                  - lambda:ListFunctions
                Resource: "*"
                Effect: Allow
              - Action:
                  - opsworks:CreateDeployment
                  - opsworks:DescribeApps
                  - opsworks:DescribeCommands
                  - opsworks:DescribeDeployments
                  - opsworks:DescribeInstances
                  - opsworks:DescribeStacks
                  - opsworks:UpdateApp
                  - opsworks:UpdateStack
                Resource: "*"
                Effect: Allow
              - Action:
                  - cloudformation:CreateStack
                  - cloudformation:DeleteStack
                  - cloudformation:DescribeStacks
                  - cloudformation:UpdateStack
                  - cloudformation:CreateChangeSet
                  - cloudformation:DeleteChangeSet
                  - cloudformation:DescribeChangeSet
                  - cloudformation:ExecuteChangeSet
                  - cloudformation:SetStackPolicy
                  - cloudformation:ValidateTemplate
                Resource: "*"
                Effect: Allow
              - Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuildBatches
                  - codebuild:StartBuildBatch
                Resource: "*"
                Effect: Allow
              - Effect: Allow
                Action:
                  - devicefarm:ListProjects
                  - devicefarm:ListDevicePools
                  - devicefarm:GetRun
                  - devicefarm:GetUpload
                  - devicefarm:CreateUpload
                  - devicefarm:ScheduleRun
                Resource: "*"
              - Effect: Allow
                Action:
                  - servicecatalog:ListProvisioningArtifacts
                  - servicecatalog:CreateProvisioningArtifact
                  - servicecatalog:DescribeProvisioningArtifact
                  - servicecatalog:DeleteProvisioningArtifact
                  - servicecatalog:UpdateProduct
                Resource: "*"
              - Effect: Allow
                Action:
                  - cloudformation:ValidateTemplate
                Resource: "*"
              - Effect: Allow
                Action:
                  - ecr:DescribeImages
                Resource: "*"
              - Effect: Allow
                Action:
                  - states:DescribeExecution
                  - states:DescribeStateMachine
                  - states:StartExecution
                Resource: "*"
              - Effect: Allow
                Action:
                  - appconfig:StartDeployment
                  - appconfig:StopDeployment
                  - appconfig:GetDeployment
                Resource: "*"
  # This is an IAM role which authorizes ECS to manage specified AWS resources
  ECSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs.amazonaws.com
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  # Rules which allow ECS to attach network interfaces to instances
                  # in order for awsvpc networking mode to work right
                  - 'ec2:AttachNetworkInterface'
                  - 'ec2:CreateNetworkInterface'
                  - 'ec2:CreateNetworkInterfacePermission'
                  - 'ec2:DeleteNetworkInterface'
                  - 'ec2:DeleteNetworkInterfacePermission'
                  - 'ec2:Describe*'
                  - 'ec2:DetachNetworkInterface'

                  # Rules which allow ECS to update load balancers
                  # with the information about how to send traffic to containers
                  - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
                  - 'elasticloadbalancing:DeregisterTargets'
                  - 'elasticloadbalancing:Describe*'
                  - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
                  - 'elasticloadbalancing:RegisterTargets'

                  # Rules which allow ECS to run tasks that have IAM roles assigned to them
                  - 'iam:PassRole'

                  # Rules that let ECS interact with container images
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'

                  # Rules that let ECS create and push logs to CloudWatch
                  - 'logs:DescribeLogStreams'
                  - 'logs:CreateLogStream'
                  - 'logs:CreateLogGroup'
                  - 'logs:PutLogEvents'
                Resource: '*'
  # This is a role which is used by the ECS tasks. Tasks in Amazon ECS define
  # the containers that should be deployed togehter and the resources they
  # require from a compute/memory perspective. So, the policies below will define
  # the IAM permissions that Sample Node Microservice docker containers will have.
  # If interaction with any other AWS service APIs is required then
  # those required roles would need to be included as allowed actions here
  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskRolePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  # Allow the ECS Tasks to download images from ECR
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'

                  # Allow the ECS tasks to upload logs to CloudWatch
                  - 'logs:CreateLogStream'
                  - 'logs:CreateLogGroup'
                  - 'logs:PutLogEvents'
                Resource: '*'
Outputs:
  CurrentRegion:
    Description: REPLACE_ME_REGION
    Value: !Ref 'AWS::Region'
    Export:
      Name: !Join 
        - ':'
        - - !Ref 'AWS::StackName'
          - CurrentRegion
  CurrentAccount:
    Description: REPLACE_ME_ACCOUNT_ID
    Value: !Ref 'AWS::AccountId'
    Export:
      Name: !Join 
        - ':'
        - - !Ref 'AWS::StackName'
          - CurrentAccount
  VPCId:
    Description: REPLACE_ME_VPC_ID
    Value: !Ref VPC
    Export:
      Name: !Join 
        - ':'
        - - !Ref 'AWS::StackName'
          - VPCId
  SecurityGroupForALB:
    Description: REPLACE_ME_SECURITY_GROUP_FOR_ALB_ID
    Value: !Ref 'SecurityGroupForALB'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'SecurityGroupForALB' ] ]
  SecurityGroupForContainer:
    Description: REPLACE_ME_SECURITY_GROUP_FOR_CONTAINER_ID
    Value: !Ref 'SecurityGroupForContainer'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'SecurityGroupForContainer' ] ]    
  PublicSubnetOne:
    Description: REPLACE_ME_PUBLIC_SUBNET_ONE
    Value: !Ref PublicSubnetOne
    Export:
      Name: !Join 
        - ':'
        - - !Ref 'AWS::StackName'
          - PublicSubnetOne
  PublicSubnetTwo:
    Description: REPLACE_ME_PUBLIC_SUBNET_TWO
    Value: !Ref PublicSubnetTwo
    Export:
      Name: !Join 
        - ':'
        - - !Ref 'AWS::StackName'
          - PublicSubnetTwo
  InternetGateway:
    Description: REPLACE_ME_INTERNET_GATEWAY
    Value: !Ref InternetGateway
    Export:
      Name: !Join 
        - ':'
        - - !Ref 'AWS::StackName'
          - InternetGateway
  GatewayAttachement:
    Description: REPLACE_ME_GATEWAY_ATTACHMENT
    Value: !Ref GatewayAttachement
    Export:
      Name: !Join 
        - ':'
        - - !Ref 'AWS::StackName'
          - GatewayAttachement
  PublicRouteTable:
    Description: REPLACE_ME_PUBLIC_ROUTE_TABLE
    Value: !Ref PublicRouteTable
    Export:
      Name: !Join 
        - ':'
        - - !Ref 'AWS::StackName'
          - PublicRouteTable
  PublicRoute:
    Description: REPLACE_ME_PUBLIC_ROUTE
    Value: !Ref PublicRoute
    Export:
      Name: !Join 
        - ':'
        - - !Ref 'AWS::StackName'
          - PublicRoute
  PublicSubnetOneRouteTableAssociation:
    Description: REPLACE_ME_PUBLIC_SUBNET_ONE_ROUTE_TABLE_ASSOCIATION
    Value: !Ref PublicSubnetOneRouteTableAssociation
    Export:
      Name: !Join 
        - ':'
        - - !Ref 'AWS::StackName'
          - PublicSubnetOneRouteTableAssociation
  PublicSubnetTwoRouteTableAssociation:
    Description: REPLACE_ME_PUBLIC_SUBNET_TWO_ROUTE_TABLE_ASSOCIATION
    Value: !Ref PublicSubnetTwoRouteTableAssociation
    Export:
      Name: !Join 
        - ':'
        - - !Ref 'AWS::StackName'
          - PublicSubnetTwoRouteTableAssociation
  ECRRepository:
    Description: REPLACE_ME_ECR_REPOSITORY_ARN
    Value: !GetAtt 'ECRRepository.Arn'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'ECRRepository' ] ]
  ECSCluster:
    Description: REPLACE_ME_ECS_CLUSTER_ARN
    Value: !GetAtt 'ECSCluster.Arn'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'ECSCluster' ] ]
  LogGroup:
    Description: REPLACE_ME_LOG_GROUP_ARN
    Value: !GetAtt 'LogGroup.Arn'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'LogGroup' ] ]
  ApplicationLoadBalancerDNSName:
    Description: REPLACE_ME_ALB_DNS_NAME
    Value: !GetAtt 'ApplicationLoadBalancer.DNSName'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'ApplicationLoadBalancer', 'DNSName' ] ]
  ApplicationLoadBalancerName:
    Description: REPLACE_ME_ALB_NAME
    Value: !GetAtt 'ApplicationLoadBalancer.LoadBalancerName'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'ApplicationLoadBalancer', 'LoadBalancerName' ] ]    
  TargetGroup1:
    Description: REPLACE_ME_TARGET_GROUP_1_NAME
    Value: !GetAtt 'TargetGroup1.TargetGroupName'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'TargetGroup1' ] ]
  TargetGroup2:
    Description: REPLACE_ME_TARGET_GROUP_2_NAME
    Value: !GetAtt 'TargetGroup2.TargetGroupName'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'TargetGroup2' ] ]
  ListenerForPort80:
    Description: REPLACE_ME_PORT_80_LISTENER_ARN
    Value: !Ref 'ListenerForPort80'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'ListenerForPort80' ] ]
  ListenerForPort8080:
    Description: REPLACE_ME_PORT_8080_LISTENER_ARN
    Value: !Ref 'ListenerForPort8080'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'ListenerForPort8080' ] ]
  TaskDefinition:
    Description: REPLACE_ME_TASK_DEFINITION
    Value: !Ref 'TaskDefinition'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'TaskDefinition' ] ]
  ECSServiceRole:
    Description: REPLACE_ME_ECS_SERVICE_ROLE_ARN
    Value: !GetAtt 'ECSServiceRole.Arn'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'ECSServiceRole' ] ]
  ECSTaskRole:
    Description: REPLACE_ME_ECS_TASK_ROLE_ARN
    Value: !GetAtt 'ECSTaskRole.Arn'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'ECSTaskRole' ] ]
  CodePipelineServiceRole:
    Description: REPLACE_ME_CODE_PIPELINE_SERVICE_ROLE_ARN
    Value: !GetAtt 'CodePipelineServiceRole.Arn'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'CodePipelineServiceRole' ] ]
  CodeDeployECSRole:
    Description: REPLACE_ME_CODE_DEPLOY_ECS_ROLE_ARN
    Value: !GetAtt 'CodeDeployECSRole.Arn'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'CodeDeployECSRole' ] ]
    
